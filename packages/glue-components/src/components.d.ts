/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CellArrowDirection } from "./components/glue-cell/glue-cell-interface";
import { DividerContentPosition } from "./components/glue-divider/glue-divider";
import { GridDirection } from "./components/glue-grid/glue-grid";
import { GridDirection as GridDirection1 } from "./components/glue-grid-item/glue-grid-item";
import { ImageFit } from "./components/glue-image/glue-image";
import { NoticeBarMode } from "./components/glue-notice-bar/glue-notice-bar";
import { RowAlign, RowJustify } from "./components/glue-row/glue-row";
import { ToastType } from "./components/glue-toast/glue-toast";
import { ResultType } from "./components/glue-uploader/glue-uploader";
import { ImageFit as ImageFit1 } from "./components/glue-uploader-preview-item/glue-uploader-preview-item";
export namespace Components {
    interface GlueActionBar {
        "safeAreaInsetBottom": true;
    }
    interface GlueActionBarButton {
        "color": string;
        "disabled": boolean;
        "icon": string;
        "loading": boolean;
        "text": string;
        "type": string;
    }
    interface GlueActionBarIcon {
        "badge": string | number;
        "color": string;
        "dot": boolean;
        "icon": string;
        "iconClass": null;
        "text": string;
    }
    interface GlueActionSheet {
        "actions": any;
        "cancelText": string;
        "closeIcon": string;
        "closeIconPosition": string;
        "closeOnClickAction": boolean;
        "closeOnClickOverlay": boolean;
        "closeOnPopstate": boolean;
        "closeable": boolean;
        "description": boolean;
        "duration": string;
        "height": string;
        "lazyRender": boolean;
        "lockScroll": boolean;
        "overlay": boolean;
        "overlayClass": any;
        "overlayStyle": object;
        "position": string;
        "round": boolean;
        "safeAreaInsetBottom": boolean;
        "show": boolean;
        "teleport": string | object;
        "title": string;
        "transition": string;
        "transitionAppear": boolean;
        "width": string;
        "zIndex": string;
    }
    interface GlueAddressEdit {
        "addressInfo": { name: string; tel: string; country: string; province: string; city: string; county: string; areaCode: string; postalCode: string; addressDetail: string; isDefault: boolean; };
        "areaColumnsPlaceholder": any[];
        "areaList": any;
        "areaPlaceholder": string;
        "deleteButtonText": string;
        "detailMaxlength": number;
        "detailRows": number;
        "disableArea": boolean;
        "isDeleting": boolean;
        "isSaving": boolean;
        "postalValidator": (value: any) => boolean;
        "saveButtonText": string;
        "searchResult": [];
        "showArea": boolean;
        "showDelete": boolean;
        "showDetail": boolean;
        "showPostal": boolean;
        "showSearchResult": string;
        "showSetDefault": boolean;
        "telMaxlength": string | number;
        "telValidator": (value: string) => boolean;
        "validator": any;
    }
    interface GlueAddressEditDetail {
        "detailMaxlength": string | number;
        "detailRows": string | number;
        "errorMessage": string;
        "first": string;
        "focused": boolean;
        "searchResult": any;
        "show": boolean;
        "showSearchResult": boolean;
        "value": string;
    }
    interface GlueAddressList {
        "addButtonText": string;
        "defaultTagText": string;
        "disabledList": any;
        "disabledText": string;
        "list": any;
        "modelValue": string | number;
        "switchable": boolean;
    }
    interface GlueAddressListItem {
        "data": any;
        "defaultTagText": string;
        "disabled": boolean;
        "switchable": boolean;
    }
    interface GlueArea {
        "first": string;
    }
    interface GlueBadge {
        "color": string;
        "content": number | string;
        "dot": boolean;
        "max": number | string;
        "offset": [number, number];
        "slotContent": boolean;
    }
    interface GlueButton {
        "block": boolean;
        "color": string;
        "disabled": boolean;
        "hairline": boolean;
        "icon": string;
        "iconPosition": string;
        "iconPrefix": string;
        "loading": boolean;
        "loadingSize": string;
        "loadingText": string;
        "loadingType": string;
        "nativeType": string;
        "plain": boolean;
        "round": boolean;
        "size": string;
        "square": boolean;
        "tag": string;
        "text": string;
        "type": string;
    }
    interface GlueCalendar {
        "first": string;
    }
    interface GlueCard {
        "centered": boolean;
        "currency": string;
        "desc": string;
        "lazyLoad": boolean;
        "num": string | number;
        "originPrice": string | number;
        "price": string | number;
        "tag": string;
        "thumb": string;
        "thumbLink": string;
        "title": string;
    }
    interface GlueCascader {
        "first": string;
    }
    interface GlueCell {
        "arrowDirection": CellArrowDirection;
        "border": boolean;
        "center": boolean;
        "clickable": boolean;
        "icon": string;
        "iconPrefix": string;
        "isLink": boolean;
        "label": string | number;
        "required": boolean;
        "rightIcon": string;
        "size": string;
        "tilabelClasstle": any;
        "title": string;
        "titleClass": any;
        "titleStyle": any;
        "value": string | number;
        "valueClass": any;
    }
    interface GlueCellGroup {
        "border": boolean;
        "title": string;
    }
    interface GlueCheckbox {
        "checkedColor": string;
        "disabled": boolean;
        "first": string;
        "iconSize": string | number;
        "labelDisabled": boolean;
        "labelPosition": string;
        "modelValue": null;
        "name": null;
        "shape": string;
    }
    interface GlueCheckboxGroup {
        "first": string;
    }
    interface GlueCircle {
        "clockwise"?: boolean;
        "currentRate": number;
        "fill": string;
        "layerColor": string;
        "lineColor": string | object;
        "rate": number;
        "size": string;
        "speed": number;
        "strokeLinecap": string;
        "strokeWidth": number;
        "text": string;
    }
    interface GlueCol {
        "offset": string | number;
        "span": string | number;
    }
    interface GlueCollapse {
        "accordion": boolean;
        "border": boolean;
        "isExpanded": (name: any) => Promise<boolean>;
        "modelValue": any[];
        "toggle": (name: any, expanded: any) => Promise<void>;
    }
    interface GlueCollapseItem {
        "arrowDirection": CellArrowDirection;
        "border": boolean;
        "center": boolean;
        "clickable": boolean;
        "disabled": boolean;
        "icon": string;
        "iconPrefix": string;
        "isLink": boolean;
        "label": string | number;
        "name": string;
        "required": boolean;
        "size": string;
        "tilabelClasstle": any;
        "title": string;
        "titleClass": any;
        "titleStyle": any;
        "value": string | number;
        "valueClass": any;
    }
    interface GlueComponent {
        "first": string;
        "last": string;
        "middle": string;
    }
    interface GlueComposables {
        "first": string;
    }
    interface GlueContactCard {
        "addText": string;
        "editable": boolean;
        "name": string;
        "tel": string;
        "type": string;
    }
    interface GlueContactEdit {
        "contactInfo": { tel: string; name: string; };
        "isDeleting": boolean;
        "isEdit": boolean;
        "isSaving": boolean;
        "setDefaultLabel": string;
        "showSetDefault": boolean;
        "telValidator": (value: string) => boolean;
    }
    interface GlueContactList {
        "addText": string;
        "defaultTagText": string;
        "list": any;
        "modelValue": any;
    }
    interface GlueCountDown {
        "autoStart": boolean;
        "custom": boolean;
        "format": string;
        "millisecond": boolean;
        "pause": () => Promise<void>;
        "reset": () => Promise<void>;
        "start": () => Promise<void>;
        "time": number;
    }
    interface GlueCoupon {
        "chosen": boolean;
        "coupon": any;
        "currency": string;
        "disabled": boolean;
    }
    interface GlueCouponCell {
        "border": boolean;
        "chosenCoupon": number;
        "coupons": [];
        "currency": string;
        "editable": boolean;
        "title": string;
    }
    interface GlueCouponList {
        "chosenCoupon": number;
        "closeButtonText": string;
        "code": string;
        "coupons": any[];
        "currency": string;
        "disabledCoupons": any[];
        "disabledTitle": string;
        "displayedCouponIndex": number;
        "emptyImage": string;
        "enabledTitle": string;
        "exchangeButtonDisabled": boolean;
        "exchangeButtonLoading": boolean;
        "exchangeButtonText": string;
        "exchangeMinLength": number;
        "first": string;
        "inputPlaceholder": string;
        "showCloseButton": boolean;
        "showCount": boolean;
        "showExchangeBar": boolean;
    }
    interface GlueDatetimePicker {
        "first": string;
    }
    interface GlueDemo {
    }
    interface GlueDialog {
        "first": string;
    }
    interface GlueDivider {
        "contentPosition": DividerContentPosition;
        "dashed": boolean;
        "hairline": boolean;
        "text": string;
    }
    interface GlueDropdownItem {
        "disabled": boolean;
        "first": string;
        "lazyRender": boolean;
        "modelValue": any;
        "options": any[];
        "teleport": any;
        "title": string;
        "titleClass": any;
    }
    interface GlueDropdownMenu {
        "first": string;
    }
    interface GlueEmpty {
        "description": string;
        "image": string;
        "imageSize": string;
    }
    interface GlueField {
        "arrowDirection": CellArrowDirection;
        "autocomplete": string;
        "autosize": any;
        "border": boolean;
        "center": boolean;
        "clearTrigger": string;
        "clearable": boolean;
        "clickable": boolean;
        "colon": any;
        "disabled": any;
        "error": any;
        "errorMessage": string;
        "errorMessageAlign": string;
        "formatTrigger": string;
        "formatter": any;
        "icon": string;
        "iconPrefix": string;
        "inputAlign": string;
        "isLink": boolean;
        "label": string | number;
        "labelAlign": string;
        "labelClass": any;
        "labelWidth": string | number;
        "leftIcon": string;
        "maxlength": string | number;
        "modelValue": string;
        "name": string;
        "placeholder": string;
        "readonly": any;
        "required": boolean;
        "rightIcon": string;
        "rows": string | number;
        "rules": any;
        "showWordLimit": boolean;
        "size": string;
        "tilabelClasstle": any;
        "title": string;
        "titleClass": any;
        "titleStyle": any;
        "type": string;
        "value": string | number;
        "valueClass": any;
    }
    interface GlueForm {
        "colon": boolean;
        "disabled": boolean;
        "errorMessageAlign": string;
        "inputAlign": string;
        "labelAlign": string;
        "labelWidth": string | number;
        "readonly": boolean;
        "scrollToError": boolean;
        "showError": boolean;
        "showErrorMessage": boolean;
        "submitOnEnter": boolean;
        "validateFirst": boolean;
        "validateTrigger": string;
    }
    interface GlueGrid {
        "border": boolean;
        "center": boolean;
        "clickable": boolean;
        "columnNum": number | string;
        "direction": GridDirection;
        "gutter": number | string;
        "iconSize": number | string;
        "square": boolean;
    }
    interface GlueGridItem {
        "badge": string | number;
        "border": boolean;
        "center": boolean;
        "clickable": boolean;
        "columnNum": number | string;
        "direction": GridDirection;
        "dot": boolean;
        "gutter": number | string;
        "icon": string;
        "iconPrefix": string;
        "iconSize": number;
        "square"?: boolean;
        "text": string;
    }
    interface GlueIcon {
        "badge": number | string;
        "classPrefix": string;
        "color": string;
        "dot": boolean;
        "name": string;
        "size": number | string;
        "tag": string;
    }
    interface GlueImage {
        "alt": string;
        "errorIcon": string;
        "fit": ImageFit;
        "height": string | number;
        "iconPrefix": string;
        "lazyLoad": boolean;
        "loadingIcon": string;
        "radius": string | number;
        "round": boolean;
        "showError": boolean;
        "showLoading": boolean;
        "src": string;
        "width": string | number;
    }
    interface GlueImagePreview {
        "first": string;
    }
    interface GlueImagePreviewItem {
        "first": string;
    }
    interface GlueIndexAnchor {
        "active": boolean;
        "index": string | number;
        "left": any;
        "rect": { top: number; height: number; };
        "top": number;
        "width": any;
    }
    interface GlueIndexBar {
        "highlightColor": string;
        "indexList": any[];
        "sticky": boolean;
        "stickyOffsetTop": number;
        "zIndex": string;
    }
    interface GlueKey {
        "color": string;
        "large": boolean;
        "loading": boolean;
        "text": string | number;
        "type": string;
        "wider": boolean;
    }
    interface GlueLazyload {
        "first": string;
    }
    interface GlueList {
        "direction": string;
        "error": boolean;
        "errorText": string;
        "finished": boolean;
        "finishedText": string;
        "immediateCheck": boolean;
        "loading": any;
        "loadingText": string;
        "offset": number;
    }
    interface GlueLoading {
        "color": string;
        "size": string | number;
        "textColor": string;
        "textSize": string | number;
        "type": string;
        "vertical": boolean;
    }
    interface GlueNavBar {
        "border": boolean;
        "fixed": boolean;
        "leftArrow": boolean;
        "leftText": string;
        "placeholder": boolean;
        "rightText": string;
        "safeAreaInsetTop": boolean;
        "title": string;
        "zIndex": string | number;
    }
    interface GlueNoticeBar {
        "background": string;
        "color": string;
        "delay": number;
        "leftIcon": string;
        "mode": NoticeBarMode;
        "scrollable": any;
        "speed": number;
        "text": string;
        "wrapable": string;
    }
    interface GlueNumberKeyboard {
        "blurOnClose": boolean;
        "closeButtonLoading": boolean;
        "closeButtonText": string;
        "deleteButtonText": string;
        "extraKey": string;
        "hideOnClickOutside": boolean;
        "maxlength": number;
        "modelValue": string;
        "randomKeyOrder": boolean;
        "safeAreaInsetBottom": boolean;
        "show": boolean;
        "showDeleteKey": boolean;
        "teleport": string | number;
        "theme": string;
        "title": string;
        "transition": boolean;
        "zIndex": string;
    }
    interface GlueOverlay {
        "customStyle": object;
        "duration": number | string;
        "easing": string;
        "lockScroll": boolean;
        "show": boolean;
        "transitionAppear": boolean;
        "zIndex": string;
    }
    interface GluePagination {
        "forceEllipses": boolean;
        "itemsPerPage": number;
        "mode": string;
        "modelValue": number;
        "nextText": string;
        "pageCount": number;
        "prevText": string;
        "showPageSize": number;
        "totalItems": number;
    }
    interface GluePasswordInput {
        "errorInfo": string;
        "focused": boolean;
        "gutter": string | number;
        "info": string;
        "length": number;
        "mask": boolean;
        "value": string;
    }
    interface GluePicker {
        "first": string;
    }
    interface GluePopover {
        "first": string;
    }
    interface GluePopup {
        "closeIcon": string;
        "closeIconPosition": string;
        "closeOnClickOverlay": boolean;
        "closeOnPopstate": boolean;
        "closeable": boolean;
        "content": string;
        "duration": number | string;
        "easing": string;
        "height": string;
        "lazyRender": boolean;
        "lockScroll": boolean;
        "overlay": boolean;
        "overlayClass": any;
        "overlayStyle": object;
        "position": string;
        "round": boolean;
        "safeAreaInsetBottom": boolean;
        "show": boolean;
        "teleport": string | HTMLElement;
        "transitionAppear": boolean;
        "width": string;
        "zIndex": string;
    }
    interface GlueProgress {
        "color": string;
        "inactive": string;
        "percentage": string;
        "pivotColor": string;
        "pivotText": string;
        "showPivot": boolean;
        "strokeWidth": string;
        "textColor": string;
        "trackColor": string;
    }
    interface GluePullRefresh {
        "animationDuration": number;
        "disabled": boolean;
        "headHeight": number;
        "loadingText": string;
        "loosingText": string;
        "modelValue": boolean;
        "pullingText": string;
        "successDuration": number;
        "successText": string;
    }
    interface GlueRadio {
        "checkedColor": string;
        "disabled": boolean;
        "iconSize": string | number;
        "labelDisabled": boolean;
        "labelPosition": string;
        "modelValue": null;
        "name": null;
        "shape": string;
    }
    interface GlueRadioGroup {
        "checkedColor": string;
        "direction": string;
        "disabled": boolean;
        "iconSize": string | number;
        "modelValue": any;
    }
    interface GlueRate {
        "allowHalf": boolean;
        "color": string;
        "count": number;
        "disabled": boolean;
        "disabledColor": string;
        "first": string;
        "gutter": string;
        "icon": string;
        "iconPrefix": string;
        "modelValue": number;
        "readonly": boolean;
        "size": number;
        "touchable": string;
        "voidColor": string;
        "voidIcon": string;
    }
    interface GlueRow {
        "align": RowAlign;
        "gutter": string | number;
        "justify": RowJustify;
    }
    interface GlueSearch {
        "actionText": string;
        "background": string;
        "clearTrigger": string;
        "clearable": boolean;
        "label": string;
        "leftIcon": string;
        "modelValue": string;
        "rightIcon": string;
        "shape": 'square';
        "showAction": boolean;
    }
    interface GlueShareSheet {
        "cancelText": string;
        "closeIcon": string;
        "closeIconPosition": string;
        "closeOnClickOverlay": boolean;
        "closeOnPopstate": boolean;
        "closeable": boolean;
        "description": string;
        "duration": string;
        "height": string;
        "lazyRender": boolean;
        "lockScroll": boolean;
        "options": any[];
        "overlay": boolean;
        "overlayClass": any;
        "overlayStyle": object;
        "position": string;
        "round": boolean;
        "safeAreaInsetBottom": boolean;
        "show": boolean;
        "teleport": string | object;
        "title": string;
        "transition": string;
        "transitionAppear": boolean;
        "width": string;
        "zIndex": string;
    }
    interface GlueSidebar {
        "modelValue": number;
    }
    interface GlueSidebarItem {
        "badge": string;
        "disabled": boolean;
        "dot": boolean;
        "title": string;
    }
    interface GlueSkeleton {
        "animateState": boolean;
        "avatar": string;
        "avatarShape": string;
        "avatarSize": string;
        "loading": boolean;
        "round": boolean;
        "row": string | number;
        "rowWidth": string;
        "titleState": boolean;
        "titleWidth": string;
    }
    interface GlueSlider {
        "first": string;
    }
    interface GlueStep {
        "first": number;
        "last": string;
        "middle": string;
    }
    interface GlueStepper {
        "allowEmpty": boolean;
        "beforeChange": any;
        "buttonSize": string | number;
        "decimalLength": string | number;
        "defaultValue": number;
        "disableInput": boolean;
        "disableMinus": boolean;
        "disablePlus": boolean;
        "disabled": boolean;
        "inputWidth": string | number;
        "integer": boolean;
        "longPress": boolean;
        "max": number;
        "min": number;
        "modelValue": string | number;
        "name": string;
        "placeholder": string;
        "showInput": boolean;
        "showMinus": boolean;
        "showPlus": boolean;
        "step": number;
        "theme": string;
    }
    interface GlueSteps {
        "active": string | number;
        "activeColor": string;
        "activeIcon": string;
        "direction": string;
        "finishIcon": string;
        "inactiveColor": string;
        "inactiveIcon": string;
    }
    interface GlueSticky {
        "container": any;
        "fixed": boolean;
        "height": number;
        "offsetBottomValue": number;
        "offsetTopValue": number;
        "position": string;
        "transform": number;
        "width": number;
        "zIndex": string;
    }
    interface GlueSubmitBar {
        "first": string;
    }
    interface GlueSwipe {
        "first": string;
    }
    interface GlueSwipeCell {
        "beforeClose": any;
        "disabled": boolean;
        "leftWidth": any;
        "name": string;
        "rightWidth": string | number;
        "stopPropagation": boolean;
    }
    interface GlueSwipeItem {
        "first": string;
    }
    interface GlueSwitch {
        "activeColor": string;
        "activeValue": boolean;
        "disabled": boolean;
        "inactiveColor": string;
        "inactiveValue": boolean;
        "loading": boolean;
        "modelValue": boolean;
        "size": string | number;
    }
    interface GlueTab {
        "first": string;
    }
    interface GlueTabbar {
        "first": string;
    }
    interface GlueTabbarItem {
        "first": string;
    }
    interface GlueTabs {
        "active": number;
        "animated": boolean;
        "background": string;
        "beforeChange": any;
        "border": boolean;
        "color": string;
        "duration": number;
        "ellipsis": boolean;
        "first": string;
        "lazyRender": boolean;
        "lineHeight": string | number;
        "lineWidth": string | number;
        "offsetTopValue": number;
        "scrollspy": boolean;
        "sticky": boolean;
        "swipeThreshold": number;
        "swipeable": boolean;
        "titleActiveColor": string;
        "titleInactiveColor": string;
        "type": string;
    }
    interface GlueTag {
        "closeable": boolean;
        "color": string;
        "first": string;
        "mark": boolean;
        "plain": boolean;
        "round": boolean;
        "show": boolean;
        "size": string;
        "textColor": string;
        "type": string;
    }
    interface GlueToast {
        "closeOnClick": boolean;
        "closeOnClickOverlay": boolean;
        "duration": number;
        "easing": string;
        "forbidClick": boolean;
        "icon": string;
        "iconPrefix": string;
        "loadingType": ToastType;
        "lockScroll": boolean;
        "message": string;
        "overlayClass": null;
        "overlayStyle": object;
        "position": string;
        "show": boolean;
        "type": string;
    }
    interface GlueTreeSelect {
        "first": string;
    }
    interface GlueUploader {
        "accept": string;
        "afterRead": any;
        "beforeDelete": any;
        "beforeRead": any;
        "capture": string;
        "deletable": boolean;
        "disabled": boolean;
        "imageFit": string;
        "lazyLoad": boolean;
        "maxCount": number;
        "maxSize": number;
        "modelValue": [];
        "multiple": boolean;
        "name": string;
        "previewFullImage": boolean;
        "previewImage": boolean;
        "previewOptions": object;
        "previewSize": string | number;
        "resultType": ResultType;
        "showUpload": boolean;
        "uploadIcon": string;
        "uploadText": string;
    }
    interface GlueUploaderPreviewItem {
        "beforeDelete": any;
        "deletable": boolean;
        "imageFit": ImageFit;
        "index": number;
        "item": any;
        "lazyLoad": boolean;
        "name": string;
        "previewSize": string | number;
    }
}
declare global {
    interface HTMLGlueActionBarElement extends Components.GlueActionBar, HTMLStencilElement {
    }
    var HTMLGlueActionBarElement: {
        prototype: HTMLGlueActionBarElement;
        new (): HTMLGlueActionBarElement;
    };
    interface HTMLGlueActionBarButtonElement extends Components.GlueActionBarButton, HTMLStencilElement {
    }
    var HTMLGlueActionBarButtonElement: {
        prototype: HTMLGlueActionBarButtonElement;
        new (): HTMLGlueActionBarButtonElement;
    };
    interface HTMLGlueActionBarIconElement extends Components.GlueActionBarIcon, HTMLStencilElement {
    }
    var HTMLGlueActionBarIconElement: {
        prototype: HTMLGlueActionBarIconElement;
        new (): HTMLGlueActionBarIconElement;
    };
    interface HTMLGlueActionSheetElement extends Components.GlueActionSheet, HTMLStencilElement {
    }
    var HTMLGlueActionSheetElement: {
        prototype: HTMLGlueActionSheetElement;
        new (): HTMLGlueActionSheetElement;
    };
    interface HTMLGlueAddressEditElement extends Components.GlueAddressEdit, HTMLStencilElement {
    }
    var HTMLGlueAddressEditElement: {
        prototype: HTMLGlueAddressEditElement;
        new (): HTMLGlueAddressEditElement;
    };
    interface HTMLGlueAddressEditDetailElement extends Components.GlueAddressEditDetail, HTMLStencilElement {
    }
    var HTMLGlueAddressEditDetailElement: {
        prototype: HTMLGlueAddressEditDetailElement;
        new (): HTMLGlueAddressEditDetailElement;
    };
    interface HTMLGlueAddressListElement extends Components.GlueAddressList, HTMLStencilElement {
    }
    var HTMLGlueAddressListElement: {
        prototype: HTMLGlueAddressListElement;
        new (): HTMLGlueAddressListElement;
    };
    interface HTMLGlueAddressListItemElement extends Components.GlueAddressListItem, HTMLStencilElement {
    }
    var HTMLGlueAddressListItemElement: {
        prototype: HTMLGlueAddressListItemElement;
        new (): HTMLGlueAddressListItemElement;
    };
    interface HTMLGlueAreaElement extends Components.GlueArea, HTMLStencilElement {
    }
    var HTMLGlueAreaElement: {
        prototype: HTMLGlueAreaElement;
        new (): HTMLGlueAreaElement;
    };
    interface HTMLGlueBadgeElement extends Components.GlueBadge, HTMLStencilElement {
    }
    var HTMLGlueBadgeElement: {
        prototype: HTMLGlueBadgeElement;
        new (): HTMLGlueBadgeElement;
    };
    interface HTMLGlueButtonElement extends Components.GlueButton, HTMLStencilElement {
    }
    var HTMLGlueButtonElement: {
        prototype: HTMLGlueButtonElement;
        new (): HTMLGlueButtonElement;
    };
    interface HTMLGlueCalendarElement extends Components.GlueCalendar, HTMLStencilElement {
    }
    var HTMLGlueCalendarElement: {
        prototype: HTMLGlueCalendarElement;
        new (): HTMLGlueCalendarElement;
    };
    interface HTMLGlueCardElement extends Components.GlueCard, HTMLStencilElement {
    }
    var HTMLGlueCardElement: {
        prototype: HTMLGlueCardElement;
        new (): HTMLGlueCardElement;
    };
    interface HTMLGlueCascaderElement extends Components.GlueCascader, HTMLStencilElement {
    }
    var HTMLGlueCascaderElement: {
        prototype: HTMLGlueCascaderElement;
        new (): HTMLGlueCascaderElement;
    };
    interface HTMLGlueCellElement extends Components.GlueCell, HTMLStencilElement {
    }
    var HTMLGlueCellElement: {
        prototype: HTMLGlueCellElement;
        new (): HTMLGlueCellElement;
    };
    interface HTMLGlueCellGroupElement extends Components.GlueCellGroup, HTMLStencilElement {
    }
    var HTMLGlueCellGroupElement: {
        prototype: HTMLGlueCellGroupElement;
        new (): HTMLGlueCellGroupElement;
    };
    interface HTMLGlueCheckboxElement extends Components.GlueCheckbox, HTMLStencilElement {
    }
    var HTMLGlueCheckboxElement: {
        prototype: HTMLGlueCheckboxElement;
        new (): HTMLGlueCheckboxElement;
    };
    interface HTMLGlueCheckboxGroupElement extends Components.GlueCheckboxGroup, HTMLStencilElement {
    }
    var HTMLGlueCheckboxGroupElement: {
        prototype: HTMLGlueCheckboxGroupElement;
        new (): HTMLGlueCheckboxGroupElement;
    };
    interface HTMLGlueCircleElement extends Components.GlueCircle, HTMLStencilElement {
    }
    var HTMLGlueCircleElement: {
        prototype: HTMLGlueCircleElement;
        new (): HTMLGlueCircleElement;
    };
    interface HTMLGlueColElement extends Components.GlueCol, HTMLStencilElement {
    }
    var HTMLGlueColElement: {
        prototype: HTMLGlueColElement;
        new (): HTMLGlueColElement;
    };
    interface HTMLGlueCollapseElement extends Components.GlueCollapse, HTMLStencilElement {
    }
    var HTMLGlueCollapseElement: {
        prototype: HTMLGlueCollapseElement;
        new (): HTMLGlueCollapseElement;
    };
    interface HTMLGlueCollapseItemElement extends Components.GlueCollapseItem, HTMLStencilElement {
    }
    var HTMLGlueCollapseItemElement: {
        prototype: HTMLGlueCollapseItemElement;
        new (): HTMLGlueCollapseItemElement;
    };
    interface HTMLGlueComponentElement extends Components.GlueComponent, HTMLStencilElement {
    }
    var HTMLGlueComponentElement: {
        prototype: HTMLGlueComponentElement;
        new (): HTMLGlueComponentElement;
    };
    interface HTMLGlueComposablesElement extends Components.GlueComposables, HTMLStencilElement {
    }
    var HTMLGlueComposablesElement: {
        prototype: HTMLGlueComposablesElement;
        new (): HTMLGlueComposablesElement;
    };
    interface HTMLGlueContactCardElement extends Components.GlueContactCard, HTMLStencilElement {
    }
    var HTMLGlueContactCardElement: {
        prototype: HTMLGlueContactCardElement;
        new (): HTMLGlueContactCardElement;
    };
    interface HTMLGlueContactEditElement extends Components.GlueContactEdit, HTMLStencilElement {
    }
    var HTMLGlueContactEditElement: {
        prototype: HTMLGlueContactEditElement;
        new (): HTMLGlueContactEditElement;
    };
    interface HTMLGlueContactListElement extends Components.GlueContactList, HTMLStencilElement {
    }
    var HTMLGlueContactListElement: {
        prototype: HTMLGlueContactListElement;
        new (): HTMLGlueContactListElement;
    };
    interface HTMLGlueCountDownElement extends Components.GlueCountDown, HTMLStencilElement {
    }
    var HTMLGlueCountDownElement: {
        prototype: HTMLGlueCountDownElement;
        new (): HTMLGlueCountDownElement;
    };
    interface HTMLGlueCouponElement extends Components.GlueCoupon, HTMLStencilElement {
    }
    var HTMLGlueCouponElement: {
        prototype: HTMLGlueCouponElement;
        new (): HTMLGlueCouponElement;
    };
    interface HTMLGlueCouponCellElement extends Components.GlueCouponCell, HTMLStencilElement {
    }
    var HTMLGlueCouponCellElement: {
        prototype: HTMLGlueCouponCellElement;
        new (): HTMLGlueCouponCellElement;
    };
    interface HTMLGlueCouponListElement extends Components.GlueCouponList, HTMLStencilElement {
    }
    var HTMLGlueCouponListElement: {
        prototype: HTMLGlueCouponListElement;
        new (): HTMLGlueCouponListElement;
    };
    interface HTMLGlueDatetimePickerElement extends Components.GlueDatetimePicker, HTMLStencilElement {
    }
    var HTMLGlueDatetimePickerElement: {
        prototype: HTMLGlueDatetimePickerElement;
        new (): HTMLGlueDatetimePickerElement;
    };
    interface HTMLGlueDemoElement extends Components.GlueDemo, HTMLStencilElement {
    }
    var HTMLGlueDemoElement: {
        prototype: HTMLGlueDemoElement;
        new (): HTMLGlueDemoElement;
    };
    interface HTMLGlueDialogElement extends Components.GlueDialog, HTMLStencilElement {
    }
    var HTMLGlueDialogElement: {
        prototype: HTMLGlueDialogElement;
        new (): HTMLGlueDialogElement;
    };
    interface HTMLGlueDividerElement extends Components.GlueDivider, HTMLStencilElement {
    }
    var HTMLGlueDividerElement: {
        prototype: HTMLGlueDividerElement;
        new (): HTMLGlueDividerElement;
    };
    interface HTMLGlueDropdownItemElement extends Components.GlueDropdownItem, HTMLStencilElement {
    }
    var HTMLGlueDropdownItemElement: {
        prototype: HTMLGlueDropdownItemElement;
        new (): HTMLGlueDropdownItemElement;
    };
    interface HTMLGlueDropdownMenuElement extends Components.GlueDropdownMenu, HTMLStencilElement {
    }
    var HTMLGlueDropdownMenuElement: {
        prototype: HTMLGlueDropdownMenuElement;
        new (): HTMLGlueDropdownMenuElement;
    };
    interface HTMLGlueEmptyElement extends Components.GlueEmpty, HTMLStencilElement {
    }
    var HTMLGlueEmptyElement: {
        prototype: HTMLGlueEmptyElement;
        new (): HTMLGlueEmptyElement;
    };
    interface HTMLGlueFieldElement extends Components.GlueField, HTMLStencilElement {
    }
    var HTMLGlueFieldElement: {
        prototype: HTMLGlueFieldElement;
        new (): HTMLGlueFieldElement;
    };
    interface HTMLGlueFormElement extends Components.GlueForm, HTMLStencilElement {
    }
    var HTMLGlueFormElement: {
        prototype: HTMLGlueFormElement;
        new (): HTMLGlueFormElement;
    };
    interface HTMLGlueGridElement extends Components.GlueGrid, HTMLStencilElement {
    }
    var HTMLGlueGridElement: {
        prototype: HTMLGlueGridElement;
        new (): HTMLGlueGridElement;
    };
    interface HTMLGlueGridItemElement extends Components.GlueGridItem, HTMLStencilElement {
    }
    var HTMLGlueGridItemElement: {
        prototype: HTMLGlueGridItemElement;
        new (): HTMLGlueGridItemElement;
    };
    interface HTMLGlueIconElement extends Components.GlueIcon, HTMLStencilElement {
    }
    var HTMLGlueIconElement: {
        prototype: HTMLGlueIconElement;
        new (): HTMLGlueIconElement;
    };
    interface HTMLGlueImageElement extends Components.GlueImage, HTMLStencilElement {
    }
    var HTMLGlueImageElement: {
        prototype: HTMLGlueImageElement;
        new (): HTMLGlueImageElement;
    };
    interface HTMLGlueImagePreviewElement extends Components.GlueImagePreview, HTMLStencilElement {
    }
    var HTMLGlueImagePreviewElement: {
        prototype: HTMLGlueImagePreviewElement;
        new (): HTMLGlueImagePreviewElement;
    };
    interface HTMLGlueImagePreviewItemElement extends Components.GlueImagePreviewItem, HTMLStencilElement {
    }
    var HTMLGlueImagePreviewItemElement: {
        prototype: HTMLGlueImagePreviewItemElement;
        new (): HTMLGlueImagePreviewItemElement;
    };
    interface HTMLGlueIndexAnchorElement extends Components.GlueIndexAnchor, HTMLStencilElement {
    }
    var HTMLGlueIndexAnchorElement: {
        prototype: HTMLGlueIndexAnchorElement;
        new (): HTMLGlueIndexAnchorElement;
    };
    interface HTMLGlueIndexBarElement extends Components.GlueIndexBar, HTMLStencilElement {
    }
    var HTMLGlueIndexBarElement: {
        prototype: HTMLGlueIndexBarElement;
        new (): HTMLGlueIndexBarElement;
    };
    interface HTMLGlueKeyElement extends Components.GlueKey, HTMLStencilElement {
    }
    var HTMLGlueKeyElement: {
        prototype: HTMLGlueKeyElement;
        new (): HTMLGlueKeyElement;
    };
    interface HTMLGlueLazyloadElement extends Components.GlueLazyload, HTMLStencilElement {
    }
    var HTMLGlueLazyloadElement: {
        prototype: HTMLGlueLazyloadElement;
        new (): HTMLGlueLazyloadElement;
    };
    interface HTMLGlueListElement extends Components.GlueList, HTMLStencilElement {
    }
    var HTMLGlueListElement: {
        prototype: HTMLGlueListElement;
        new (): HTMLGlueListElement;
    };
    interface HTMLGlueLoadingElement extends Components.GlueLoading, HTMLStencilElement {
    }
    var HTMLGlueLoadingElement: {
        prototype: HTMLGlueLoadingElement;
        new (): HTMLGlueLoadingElement;
    };
    interface HTMLGlueNavBarElement extends Components.GlueNavBar, HTMLStencilElement {
    }
    var HTMLGlueNavBarElement: {
        prototype: HTMLGlueNavBarElement;
        new (): HTMLGlueNavBarElement;
    };
    interface HTMLGlueNoticeBarElement extends Components.GlueNoticeBar, HTMLStencilElement {
    }
    var HTMLGlueNoticeBarElement: {
        prototype: HTMLGlueNoticeBarElement;
        new (): HTMLGlueNoticeBarElement;
    };
    interface HTMLGlueNumberKeyboardElement extends Components.GlueNumberKeyboard, HTMLStencilElement {
    }
    var HTMLGlueNumberKeyboardElement: {
        prototype: HTMLGlueNumberKeyboardElement;
        new (): HTMLGlueNumberKeyboardElement;
    };
    interface HTMLGlueOverlayElement extends Components.GlueOverlay, HTMLStencilElement {
    }
    var HTMLGlueOverlayElement: {
        prototype: HTMLGlueOverlayElement;
        new (): HTMLGlueOverlayElement;
    };
    interface HTMLGluePaginationElement extends Components.GluePagination, HTMLStencilElement {
    }
    var HTMLGluePaginationElement: {
        prototype: HTMLGluePaginationElement;
        new (): HTMLGluePaginationElement;
    };
    interface HTMLGluePasswordInputElement extends Components.GluePasswordInput, HTMLStencilElement {
    }
    var HTMLGluePasswordInputElement: {
        prototype: HTMLGluePasswordInputElement;
        new (): HTMLGluePasswordInputElement;
    };
    interface HTMLGluePickerElement extends Components.GluePicker, HTMLStencilElement {
    }
    var HTMLGluePickerElement: {
        prototype: HTMLGluePickerElement;
        new (): HTMLGluePickerElement;
    };
    interface HTMLGluePopoverElement extends Components.GluePopover, HTMLStencilElement {
    }
    var HTMLGluePopoverElement: {
        prototype: HTMLGluePopoverElement;
        new (): HTMLGluePopoverElement;
    };
    interface HTMLGluePopupElement extends Components.GluePopup, HTMLStencilElement {
    }
    var HTMLGluePopupElement: {
        prototype: HTMLGluePopupElement;
        new (): HTMLGluePopupElement;
    };
    interface HTMLGlueProgressElement extends Components.GlueProgress, HTMLStencilElement {
    }
    var HTMLGlueProgressElement: {
        prototype: HTMLGlueProgressElement;
        new (): HTMLGlueProgressElement;
    };
    interface HTMLGluePullRefreshElement extends Components.GluePullRefresh, HTMLStencilElement {
    }
    var HTMLGluePullRefreshElement: {
        prototype: HTMLGluePullRefreshElement;
        new (): HTMLGluePullRefreshElement;
    };
    interface HTMLGlueRadioElement extends Components.GlueRadio, HTMLStencilElement {
    }
    var HTMLGlueRadioElement: {
        prototype: HTMLGlueRadioElement;
        new (): HTMLGlueRadioElement;
    };
    interface HTMLGlueRadioGroupElement extends Components.GlueRadioGroup, HTMLStencilElement {
    }
    var HTMLGlueRadioGroupElement: {
        prototype: HTMLGlueRadioGroupElement;
        new (): HTMLGlueRadioGroupElement;
    };
    interface HTMLGlueRateElement extends Components.GlueRate, HTMLStencilElement {
    }
    var HTMLGlueRateElement: {
        prototype: HTMLGlueRateElement;
        new (): HTMLGlueRateElement;
    };
    interface HTMLGlueRowElement extends Components.GlueRow, HTMLStencilElement {
    }
    var HTMLGlueRowElement: {
        prototype: HTMLGlueRowElement;
        new (): HTMLGlueRowElement;
    };
    interface HTMLGlueSearchElement extends Components.GlueSearch, HTMLStencilElement {
    }
    var HTMLGlueSearchElement: {
        prototype: HTMLGlueSearchElement;
        new (): HTMLGlueSearchElement;
    };
    interface HTMLGlueShareSheetElement extends Components.GlueShareSheet, HTMLStencilElement {
    }
    var HTMLGlueShareSheetElement: {
        prototype: HTMLGlueShareSheetElement;
        new (): HTMLGlueShareSheetElement;
    };
    interface HTMLGlueSidebarElement extends Components.GlueSidebar, HTMLStencilElement {
    }
    var HTMLGlueSidebarElement: {
        prototype: HTMLGlueSidebarElement;
        new (): HTMLGlueSidebarElement;
    };
    interface HTMLGlueSidebarItemElement extends Components.GlueSidebarItem, HTMLStencilElement {
    }
    var HTMLGlueSidebarItemElement: {
        prototype: HTMLGlueSidebarItemElement;
        new (): HTMLGlueSidebarItemElement;
    };
    interface HTMLGlueSkeletonElement extends Components.GlueSkeleton, HTMLStencilElement {
    }
    var HTMLGlueSkeletonElement: {
        prototype: HTMLGlueSkeletonElement;
        new (): HTMLGlueSkeletonElement;
    };
    interface HTMLGlueSliderElement extends Components.GlueSlider, HTMLStencilElement {
    }
    var HTMLGlueSliderElement: {
        prototype: HTMLGlueSliderElement;
        new (): HTMLGlueSliderElement;
    };
    interface HTMLGlueStepElement extends Components.GlueStep, HTMLStencilElement {
    }
    var HTMLGlueStepElement: {
        prototype: HTMLGlueStepElement;
        new (): HTMLGlueStepElement;
    };
    interface HTMLGlueStepperElement extends Components.GlueStepper, HTMLStencilElement {
    }
    var HTMLGlueStepperElement: {
        prototype: HTMLGlueStepperElement;
        new (): HTMLGlueStepperElement;
    };
    interface HTMLGlueStepsElement extends Components.GlueSteps, HTMLStencilElement {
    }
    var HTMLGlueStepsElement: {
        prototype: HTMLGlueStepsElement;
        new (): HTMLGlueStepsElement;
    };
    interface HTMLGlueStickyElement extends Components.GlueSticky, HTMLStencilElement {
    }
    var HTMLGlueStickyElement: {
        prototype: HTMLGlueStickyElement;
        new (): HTMLGlueStickyElement;
    };
    interface HTMLGlueSubmitBarElement extends Components.GlueSubmitBar, HTMLStencilElement {
    }
    var HTMLGlueSubmitBarElement: {
        prototype: HTMLGlueSubmitBarElement;
        new (): HTMLGlueSubmitBarElement;
    };
    interface HTMLGlueSwipeElement extends Components.GlueSwipe, HTMLStencilElement {
    }
    var HTMLGlueSwipeElement: {
        prototype: HTMLGlueSwipeElement;
        new (): HTMLGlueSwipeElement;
    };
    interface HTMLGlueSwipeCellElement extends Components.GlueSwipeCell, HTMLStencilElement {
    }
    var HTMLGlueSwipeCellElement: {
        prototype: HTMLGlueSwipeCellElement;
        new (): HTMLGlueSwipeCellElement;
    };
    interface HTMLGlueSwipeItemElement extends Components.GlueSwipeItem, HTMLStencilElement {
    }
    var HTMLGlueSwipeItemElement: {
        prototype: HTMLGlueSwipeItemElement;
        new (): HTMLGlueSwipeItemElement;
    };
    interface HTMLGlueSwitchElement extends Components.GlueSwitch, HTMLStencilElement {
    }
    var HTMLGlueSwitchElement: {
        prototype: HTMLGlueSwitchElement;
        new (): HTMLGlueSwitchElement;
    };
    interface HTMLGlueTabElement extends Components.GlueTab, HTMLStencilElement {
    }
    var HTMLGlueTabElement: {
        prototype: HTMLGlueTabElement;
        new (): HTMLGlueTabElement;
    };
    interface HTMLGlueTabbarElement extends Components.GlueTabbar, HTMLStencilElement {
    }
    var HTMLGlueTabbarElement: {
        prototype: HTMLGlueTabbarElement;
        new (): HTMLGlueTabbarElement;
    };
    interface HTMLGlueTabbarItemElement extends Components.GlueTabbarItem, HTMLStencilElement {
    }
    var HTMLGlueTabbarItemElement: {
        prototype: HTMLGlueTabbarItemElement;
        new (): HTMLGlueTabbarItemElement;
    };
    interface HTMLGlueTabsElement extends Components.GlueTabs, HTMLStencilElement {
    }
    var HTMLGlueTabsElement: {
        prototype: HTMLGlueTabsElement;
        new (): HTMLGlueTabsElement;
    };
    interface HTMLGlueTagElement extends Components.GlueTag, HTMLStencilElement {
    }
    var HTMLGlueTagElement: {
        prototype: HTMLGlueTagElement;
        new (): HTMLGlueTagElement;
    };
    interface HTMLGlueToastElement extends Components.GlueToast, HTMLStencilElement {
    }
    var HTMLGlueToastElement: {
        prototype: HTMLGlueToastElement;
        new (): HTMLGlueToastElement;
    };
    interface HTMLGlueTreeSelectElement extends Components.GlueTreeSelect, HTMLStencilElement {
    }
    var HTMLGlueTreeSelectElement: {
        prototype: HTMLGlueTreeSelectElement;
        new (): HTMLGlueTreeSelectElement;
    };
    interface HTMLGlueUploaderElement extends Components.GlueUploader, HTMLStencilElement {
    }
    var HTMLGlueUploaderElement: {
        prototype: HTMLGlueUploaderElement;
        new (): HTMLGlueUploaderElement;
    };
    interface HTMLGlueUploaderPreviewItemElement extends Components.GlueUploaderPreviewItem, HTMLStencilElement {
    }
    var HTMLGlueUploaderPreviewItemElement: {
        prototype: HTMLGlueUploaderPreviewItemElement;
        new (): HTMLGlueUploaderPreviewItemElement;
    };
    interface HTMLElementTagNameMap {
        "glue-action-bar": HTMLGlueActionBarElement;
        "glue-action-bar-button": HTMLGlueActionBarButtonElement;
        "glue-action-bar-icon": HTMLGlueActionBarIconElement;
        "glue-action-sheet": HTMLGlueActionSheetElement;
        "glue-address-edit": HTMLGlueAddressEditElement;
        "glue-address-edit-detail": HTMLGlueAddressEditDetailElement;
        "glue-address-list": HTMLGlueAddressListElement;
        "glue-address-list-item": HTMLGlueAddressListItemElement;
        "glue-area": HTMLGlueAreaElement;
        "glue-badge": HTMLGlueBadgeElement;
        "glue-button": HTMLGlueButtonElement;
        "glue-calendar": HTMLGlueCalendarElement;
        "glue-card": HTMLGlueCardElement;
        "glue-cascader": HTMLGlueCascaderElement;
        "glue-cell": HTMLGlueCellElement;
        "glue-cell-group": HTMLGlueCellGroupElement;
        "glue-checkbox": HTMLGlueCheckboxElement;
        "glue-checkbox-group": HTMLGlueCheckboxGroupElement;
        "glue-circle": HTMLGlueCircleElement;
        "glue-col": HTMLGlueColElement;
        "glue-collapse": HTMLGlueCollapseElement;
        "glue-collapse-item": HTMLGlueCollapseItemElement;
        "glue-component": HTMLGlueComponentElement;
        "glue-composables": HTMLGlueComposablesElement;
        "glue-contact-card": HTMLGlueContactCardElement;
        "glue-contact-edit": HTMLGlueContactEditElement;
        "glue-contact-list": HTMLGlueContactListElement;
        "glue-count-down": HTMLGlueCountDownElement;
        "glue-coupon": HTMLGlueCouponElement;
        "glue-coupon-cell": HTMLGlueCouponCellElement;
        "glue-coupon-list": HTMLGlueCouponListElement;
        "glue-datetime-picker": HTMLGlueDatetimePickerElement;
        "glue-demo": HTMLGlueDemoElement;
        "glue-dialog": HTMLGlueDialogElement;
        "glue-divider": HTMLGlueDividerElement;
        "glue-dropdown-item": HTMLGlueDropdownItemElement;
        "glue-dropdown-menu": HTMLGlueDropdownMenuElement;
        "glue-empty": HTMLGlueEmptyElement;
        "glue-field": HTMLGlueFieldElement;
        "glue-form": HTMLGlueFormElement;
        "glue-grid": HTMLGlueGridElement;
        "glue-grid-item": HTMLGlueGridItemElement;
        "glue-icon": HTMLGlueIconElement;
        "glue-image": HTMLGlueImageElement;
        "glue-image-preview": HTMLGlueImagePreviewElement;
        "glue-image-preview-item": HTMLGlueImagePreviewItemElement;
        "glue-index-anchor": HTMLGlueIndexAnchorElement;
        "glue-index-bar": HTMLGlueIndexBarElement;
        "glue-key": HTMLGlueKeyElement;
        "glue-lazyload": HTMLGlueLazyloadElement;
        "glue-list": HTMLGlueListElement;
        "glue-loading": HTMLGlueLoadingElement;
        "glue-nav-bar": HTMLGlueNavBarElement;
        "glue-notice-bar": HTMLGlueNoticeBarElement;
        "glue-number-keyboard": HTMLGlueNumberKeyboardElement;
        "glue-overlay": HTMLGlueOverlayElement;
        "glue-pagination": HTMLGluePaginationElement;
        "glue-password-input": HTMLGluePasswordInputElement;
        "glue-picker": HTMLGluePickerElement;
        "glue-popover": HTMLGluePopoverElement;
        "glue-popup": HTMLGluePopupElement;
        "glue-progress": HTMLGlueProgressElement;
        "glue-pull-refresh": HTMLGluePullRefreshElement;
        "glue-radio": HTMLGlueRadioElement;
        "glue-radio-group": HTMLGlueRadioGroupElement;
        "glue-rate": HTMLGlueRateElement;
        "glue-row": HTMLGlueRowElement;
        "glue-search": HTMLGlueSearchElement;
        "glue-share-sheet": HTMLGlueShareSheetElement;
        "glue-sidebar": HTMLGlueSidebarElement;
        "glue-sidebar-item": HTMLGlueSidebarItemElement;
        "glue-skeleton": HTMLGlueSkeletonElement;
        "glue-slider": HTMLGlueSliderElement;
        "glue-step": HTMLGlueStepElement;
        "glue-stepper": HTMLGlueStepperElement;
        "glue-steps": HTMLGlueStepsElement;
        "glue-sticky": HTMLGlueStickyElement;
        "glue-submit-bar": HTMLGlueSubmitBarElement;
        "glue-swipe": HTMLGlueSwipeElement;
        "glue-swipe-cell": HTMLGlueSwipeCellElement;
        "glue-swipe-item": HTMLGlueSwipeItemElement;
        "glue-switch": HTMLGlueSwitchElement;
        "glue-tab": HTMLGlueTabElement;
        "glue-tabbar": HTMLGlueTabbarElement;
        "glue-tabbar-item": HTMLGlueTabbarItemElement;
        "glue-tabs": HTMLGlueTabsElement;
        "glue-tag": HTMLGlueTagElement;
        "glue-toast": HTMLGlueToastElement;
        "glue-tree-select": HTMLGlueTreeSelectElement;
        "glue-uploader": HTMLGlueUploaderElement;
        "glue-uploader-preview-item": HTMLGlueUploaderPreviewItemElement;
    }
}
declare namespace LocalJSX {
    interface GlueActionBar {
        "safeAreaInsetBottom"?: true;
    }
    interface GlueActionBarButton {
        "color"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "loading"?: boolean;
        "onOnClick"?: (event: CustomEvent<any>) => void;
        "text"?: string;
        "type"?: string;
    }
    interface GlueActionBarIcon {
        "badge"?: string | number;
        "color"?: string;
        "dot"?: boolean;
        "icon"?: string;
        "iconClass"?: null;
        "onOnClick"?: (event: CustomEvent<any>) => void;
        "text"?: string;
    }
    interface GlueActionSheet {
        "actions"?: any;
        "cancelText"?: string;
        "closeIcon"?: string;
        "closeIconPosition"?: string;
        "closeOnClickAction"?: boolean;
        "closeOnClickOverlay"?: boolean;
        "closeOnPopstate"?: boolean;
        "closeable"?: boolean;
        "description"?: boolean;
        "duration"?: string;
        "height"?: string;
        "lazyRender"?: boolean;
        "lockScroll"?: boolean;
        "onOnCancel"?: (event: CustomEvent<any>) => void;
        "onOnShow"?: (event: CustomEvent<any>) => void;
        "overlay"?: boolean;
        "overlayClass"?: any;
        "overlayStyle"?: object;
        "position"?: string;
        "round"?: boolean;
        "safeAreaInsetBottom"?: boolean;
        "show"?: boolean;
        "teleport"?: string | object;
        "title"?: string;
        "transition"?: string;
        "transitionAppear"?: boolean;
        "width"?: string;
        "zIndex"?: string;
    }
    interface GlueAddressEdit {
        "addressInfo"?: { name: string; tel: string; country: string; province: string; city: string; county: string; areaCode: string; postalCode: string; addressDetail: string; isDefault: boolean; };
        "areaColumnsPlaceholder"?: any[];
        "areaList"?: any;
        "areaPlaceholder"?: string;
        "deleteButtonText"?: string;
        "detailMaxlength"?: number;
        "detailRows"?: number;
        "disableArea"?: boolean;
        "isDeleting"?: boolean;
        "isSaving"?: boolean;
        "postalValidator"?: (value: any) => boolean;
        "saveButtonText"?: string;
        "searchResult"?: [];
        "showArea"?: boolean;
        "showDelete"?: boolean;
        "showDetail"?: boolean;
        "showPostal"?: boolean;
        "showSearchResult"?: string;
        "showSetDefault"?: boolean;
        "telMaxlength"?: string | number;
        "telValidator"?: (value: string) => boolean;
        "validator"?: any;
    }
    interface GlueAddressEditDetail {
        "detailMaxlength"?: string | number;
        "detailRows"?: string | number;
        "errorMessage"?: string;
        "first"?: string;
        "focused"?: boolean;
        "onBlur"?: (event: CustomEvent<any>) => void;
        "onFocus"?: (event: CustomEvent<any>) => void;
        "onInput"?: (event: CustomEvent<any>) => void;
        "searchResult"?: any;
        "show"?: boolean;
        "showSearchResult"?: boolean;
        "value"?: string;
    }
    interface GlueAddressList {
        "addButtonText"?: string;
        "defaultTagText"?: string;
        "disabledList"?: any;
        "disabledText"?: string;
        "list"?: any;
        "modelValue"?: string | number;
        "switchable"?: boolean;
    }
    interface GlueAddressListItem {
        "data"?: any;
        "defaultTagText"?: string;
        "disabled"?: boolean;
        "switchable"?: boolean;
    }
    interface GlueArea {
        "first"?: string;
    }
    interface GlueBadge {
        "color"?: string;
        "content"?: number | string;
        "dot"?: boolean;
        "max"?: number | string;
        "offset"?: [number, number];
        "slotContent"?: boolean;
    }
    interface GlueButton {
        "block"?: boolean;
        "color"?: string;
        "disabled"?: boolean;
        "hairline"?: boolean;
        "icon"?: string;
        "iconPosition"?: string;
        "iconPrefix"?: string;
        "loading"?: boolean;
        "loadingSize"?: string;
        "loadingText"?: string;
        "loadingType"?: string;
        "nativeType"?: string;
        "onGlueClick"?: (event: CustomEvent<any>) => void;
        "plain"?: boolean;
        "round"?: boolean;
        "size"?: string;
        "square"?: boolean;
        "tag"?: string;
        "text"?: string;
        "type"?: string;
    }
    interface GlueCalendar {
        "first"?: string;
    }
    interface GlueCard {
        "centered"?: boolean;
        "currency"?: string;
        "desc"?: string;
        "lazyLoad"?: boolean;
        "num"?: string | number;
        "onOnClick"?: (event: CustomEvent<any>) => void;
        "originPrice"?: string | number;
        "price"?: string | number;
        "tag"?: string;
        "thumb"?: string;
        "thumbLink"?: string;
        "title"?: string;
    }
    interface GlueCascader {
        "first"?: string;
    }
    interface GlueCell {
        "arrowDirection"?: CellArrowDirection;
        "border"?: boolean;
        "center"?: boolean;
        "clickable"?: boolean;
        "icon"?: string;
        "iconPrefix"?: string;
        "isLink"?: boolean;
        "label"?: string | number;
        "required"?: boolean;
        "rightIcon"?: string;
        "size"?: string;
        "tilabelClasstle"?: any;
        "title"?: string;
        "titleClass"?: any;
        "titleStyle"?: any;
        "value"?: string | number;
        "valueClass"?: any;
    }
    interface GlueCellGroup {
        "border"?: boolean;
        "title"?: string;
    }
    interface GlueCheckbox {
        "checkedColor"?: string;
        "disabled"?: boolean;
        "first"?: string;
        "iconSize"?: string | number;
        "labelDisabled"?: boolean;
        "labelPosition"?: string;
        "modelValue"?: null;
        "name"?: null;
        "shape"?: string;
    }
    interface GlueCheckboxGroup {
        "first"?: string;
    }
    interface GlueCircle {
        "clockwise"?: boolean;
        "currentRate"?: number;
        "fill"?: string;
        "layerColor"?: string;
        "lineColor"?: string | object;
        "onGlueChange"?: (event: CustomEvent<any>) => void;
        "rate"?: number;
        "size"?: string;
        "speed"?: number;
        "strokeLinecap"?: string;
        "strokeWidth"?: number;
        "text"?: string;
    }
    interface GlueCol {
        "offset"?: string | number;
        "span"?: string | number;
    }
    interface GlueCollapse {
        "accordion"?: boolean;
        "border"?: boolean;
        "modelValue"?: any[];
    }
    interface GlueCollapseItem {
        "arrowDirection"?: CellArrowDirection;
        "border"?: boolean;
        "center"?: boolean;
        "clickable"?: boolean;
        "disabled"?: boolean;
        "icon"?: string;
        "iconPrefix"?: string;
        "isLink"?: boolean;
        "label"?: string | number;
        "name"?: string;
        "onClickTitle"?: (event: CustomEvent<any>) => void;
        "required"?: boolean;
        "size"?: string;
        "tilabelClasstle"?: any;
        "title"?: string;
        "titleClass"?: any;
        "titleStyle"?: any;
        "value"?: string | number;
        "valueClass"?: any;
    }
    interface GlueComponent {
        "first"?: string;
        "last"?: string;
        "middle"?: string;
    }
    interface GlueComposables {
        "first"?: string;
    }
    interface GlueContactCard {
        "addText"?: string;
        "editable"?: boolean;
        "name"?: string;
        "tel"?: string;
        "type"?: string;
    }
    interface GlueContactEdit {
        "contactInfo"?: { tel: string; name: string; };
        "isDeleting"?: boolean;
        "isEdit"?: boolean;
        "isSaving"?: boolean;
        "setDefaultLabel"?: string;
        "showSetDefault"?: boolean;
        "telValidator"?: (value: string) => boolean;
    }
    interface GlueContactList {
        "addText"?: string;
        "defaultTagText"?: string;
        "list"?: any;
        "modelValue"?: any;
    }
    interface GlueCountDown {
        "autoStart"?: boolean;
        "custom"?: boolean;
        "format"?: string;
        "millisecond"?: boolean;
        "onGlueChange"?: (event: CustomEvent<any>) => void;
        "onGlueFinish"?: (event: CustomEvent<any>) => void;
        "time"?: number;
    }
    interface GlueCoupon {
        "chosen"?: boolean;
        "coupon"?: any;
        "currency"?: string;
        "disabled"?: boolean;
    }
    interface GlueCouponCell {
        "border"?: boolean;
        "chosenCoupon"?: number;
        "coupons"?: [];
        "currency"?: string;
        "editable"?: boolean;
        "title"?: string;
    }
    interface GlueCouponList {
        "chosenCoupon"?: number;
        "closeButtonText"?: string;
        "code"?: string;
        "coupons"?: any[];
        "currency"?: string;
        "disabledCoupons"?: any[];
        "disabledTitle"?: string;
        "displayedCouponIndex"?: number;
        "emptyImage"?: string;
        "enabledTitle"?: string;
        "exchangeButtonDisabled"?: boolean;
        "exchangeButtonLoading"?: boolean;
        "exchangeButtonText"?: string;
        "exchangeMinLength"?: number;
        "first"?: string;
        "inputPlaceholder"?: string;
        "showCloseButton"?: boolean;
        "showCount"?: boolean;
        "showExchangeBar"?: boolean;
    }
    interface GlueDatetimePicker {
        "first"?: string;
    }
    interface GlueDemo {
    }
    interface GlueDialog {
        "first"?: string;
    }
    interface GlueDivider {
        "contentPosition"?: DividerContentPosition;
        "dashed"?: boolean;
        "hairline"?: boolean;
        "text"?: string;
    }
    interface GlueDropdownItem {
        "disabled"?: boolean;
        "first"?: string;
        "lazyRender"?: boolean;
        "modelValue"?: any;
        "options"?: any[];
        "teleport"?: any;
        "title"?: string;
        "titleClass"?: any;
    }
    interface GlueDropdownMenu {
        "first"?: string;
    }
    interface GlueEmpty {
        "description"?: string;
        "image"?: string;
        "imageSize"?: string;
    }
    interface GlueField {
        "arrowDirection"?: CellArrowDirection;
        "autocomplete"?: string;
        "autosize"?: any;
        "border"?: boolean;
        "center"?: boolean;
        "clearTrigger"?: string;
        "clearable"?: boolean;
        "clickable"?: boolean;
        "colon"?: any;
        "disabled"?: any;
        "error"?: any;
        "errorMessage"?: string;
        "errorMessageAlign"?: string;
        "formatTrigger"?: string;
        "formatter"?: any;
        "icon"?: string;
        "iconPrefix"?: string;
        "inputAlign"?: string;
        "isLink"?: boolean;
        "label"?: string | number;
        "labelAlign"?: string;
        "labelClass"?: any;
        "labelWidth"?: string | number;
        "leftIcon"?: string;
        "maxlength"?: string | number;
        "modelValue"?: string;
        "name"?: string;
        "placeholder"?: string;
        "readonly"?: any;
        "required"?: boolean;
        "rightIcon"?: string;
        "rows"?: string | number;
        "rules"?: any;
        "showWordLimit"?: boolean;
        "size"?: string;
        "tilabelClasstle"?: any;
        "title"?: string;
        "titleClass"?: any;
        "titleStyle"?: any;
        "type"?: string;
        "value"?: string | number;
        "valueClass"?: any;
    }
    interface GlueForm {
        "colon"?: boolean;
        "disabled"?: boolean;
        "errorMessageAlign"?: string;
        "inputAlign"?: string;
        "labelAlign"?: string;
        "labelWidth"?: string | number;
        "onFailed"?: (event: CustomEvent<any>) => void;
        "onSubmitChange"?: (event: CustomEvent<any>) => void;
        "readonly"?: boolean;
        "scrollToError"?: boolean;
        "showError"?: boolean;
        "showErrorMessage"?: boolean;
        "submitOnEnter"?: boolean;
        "validateFirst"?: boolean;
        "validateTrigger"?: string;
    }
    interface GlueGrid {
        "border"?: boolean;
        "center"?: boolean;
        "clickable"?: boolean;
        "columnNum"?: number | string;
        "direction"?: GridDirection;
        "gutter"?: number | string;
        "iconSize"?: number | string;
        "square"?: boolean;
    }
    interface GlueGridItem {
        "badge"?: string | number;
        "border"?: boolean;
        "center"?: boolean;
        "clickable"?: boolean;
        "columnNum"?: number | string;
        "direction"?: GridDirection;
        "dot"?: boolean;
        "gutter"?: number | string;
        "icon"?: string;
        "iconPrefix"?: string;
        "iconSize"?: number;
        "square"?: boolean;
        "text"?: string;
    }
    interface GlueIcon {
        "badge"?: number | string;
        "classPrefix"?: string;
        "color"?: string;
        "dot"?: boolean;
        "name"?: string;
        "size"?: number | string;
        "tag"?: string;
    }
    interface GlueImage {
        "alt"?: string;
        "errorIcon"?: string;
        "fit"?: ImageFit;
        "height"?: string | number;
        "iconPrefix"?: string;
        "lazyLoad"?: boolean;
        "loadingIcon"?: string;
        "onGlueError"?: (event: CustomEvent<any>) => void;
        "onGlueLoad"?: (event: CustomEvent<any>) => void;
        "onOnError"?: (event: CustomEvent<any>) => void;
        "radius"?: string | number;
        "round"?: boolean;
        "showError"?: boolean;
        "showLoading"?: boolean;
        "src"?: string;
        "width"?: string | number;
    }
    interface GlueImagePreview {
        "first"?: string;
    }
    interface GlueImagePreviewItem {
        "first"?: string;
    }
    interface GlueIndexAnchor {
        "active"?: boolean;
        "index"?: string | number;
        "left"?: any;
        "rect"?: { top: number; height: number; };
        "top"?: number;
        "width"?: any;
    }
    interface GlueIndexBar {
        "highlightColor"?: string;
        "indexList"?: any[];
        "onClickSidebar"?: (event: CustomEvent<any>) => void;
        "sticky"?: boolean;
        "stickyOffsetTop"?: number;
        "zIndex"?: string;
    }
    interface GlueKey {
        "color"?: string;
        "large"?: boolean;
        "loading"?: boolean;
        "text"?: string | number;
        "type"?: string;
        "wider"?: boolean;
    }
    interface GlueLazyload {
        "first"?: string;
    }
    interface GlueList {
        "direction"?: string;
        "error"?: boolean;
        "errorText"?: string;
        "finished"?: boolean;
        "finishedText"?: string;
        "immediateCheck"?: boolean;
        "loading"?: any;
        "loadingText"?: string;
        "offset"?: number;
        "onClickErrorText"?: (event: CustomEvent<any>) => void;
    }
    interface GlueLoading {
        "color"?: string;
        "size"?: string | number;
        "textColor"?: string;
        "textSize"?: string | number;
        "type"?: string;
        "vertical"?: boolean;
    }
    interface GlueNavBar {
        "border"?: boolean;
        "fixed"?: boolean;
        "leftArrow"?: boolean;
        "leftText"?: string;
        "onClickLeft"?: (event: CustomEvent<any>) => void;
        "onClickRight"?: (event: CustomEvent<any>) => void;
        "placeholder"?: boolean;
        "rightText"?: string;
        "safeAreaInsetTop"?: boolean;
        "title"?: string;
        "zIndex"?: string | number;
    }
    interface GlueNoticeBar {
        "background"?: string;
        "color"?: string;
        "delay"?: number;
        "leftIcon"?: string;
        "mode"?: NoticeBarMode;
        "onClose"?: (event: CustomEvent<any>) => void;
        "onReplay"?: (event: CustomEvent<any>) => void;
        "scrollable"?: any;
        "speed"?: number;
        "text"?: string;
        "wrapable"?: string;
    }
    interface GlueNumberKeyboard {
        "blurOnClose"?: boolean;
        "closeButtonLoading"?: boolean;
        "closeButtonText"?: string;
        "deleteButtonText"?: string;
        "extraKey"?: string;
        "hideOnClickOutside"?: boolean;
        "maxlength"?: number;
        "modelValue"?: string;
        "onBlur"?: (event: CustomEvent<any>) => void;
        "onChangeValue"?: (event: CustomEvent<any>) => void;
        "onClose"?: (event: CustomEvent<any>) => void;
        "onDelete"?: (event: CustomEvent<any>) => void;
        "onInput"?: (event: CustomEvent<any>) => void;
        "randomKeyOrder"?: boolean;
        "safeAreaInsetBottom"?: boolean;
        "show"?: boolean;
        "showDeleteKey"?: boolean;
        "teleport"?: string | number;
        "theme"?: string;
        "title"?: string;
        "transition"?: boolean;
        "zIndex"?: string;
    }
    interface GlueOverlay {
        "customStyle"?: object;
        "duration"?: number | string;
        "easing"?: string;
        "lockScroll"?: boolean;
        "show"?: boolean;
        "transitionAppear"?: boolean;
        "zIndex"?: string;
    }
    interface GluePagination {
        "forceEllipses"?: boolean;
        "itemsPerPage"?: number;
        "mode"?: string;
        "modelValue"?: number;
        "nextText"?: string;
        "onChange"?: (event: CustomEvent<any>) => void;
        "onValue"?: (event: CustomEvent<any>) => void;
        "pageCount"?: number;
        "prevText"?: string;
        "showPageSize"?: number;
        "totalItems"?: number;
    }
    interface GluePasswordInput {
        "errorInfo"?: string;
        "focused"?: boolean;
        "gutter"?: string | number;
        "info"?: string;
        "length"?: number;
        "mask"?: boolean;
        "onFocus"?: (event: CustomEvent<any>) => void;
        "value"?: string;
    }
    interface GluePicker {
        "first"?: string;
    }
    interface GluePopover {
        "first"?: string;
    }
    interface GluePopup {
        "closeIcon"?: string;
        "closeIconPosition"?: string;
        "closeOnClickOverlay"?: boolean;
        "closeOnPopstate"?: boolean;
        "closeable"?: boolean;
        "content"?: string;
        "duration"?: number | string;
        "easing"?: string;
        "height"?: string;
        "lazyRender"?: boolean;
        "lockScroll"?: boolean;
        "onGlueClick"?: (event: CustomEvent<any>) => void;
        "onGlueClickCloseIcon"?: (event: CustomEvent<any>) => void;
        "onGlueClickOverlay"?: (event: CustomEvent<any>) => void;
        "onGlueClose"?: (event: CustomEvent<any>) => void;
        "onGlueClosed"?: (event: CustomEvent<any>) => void;
        "onGlueOpen"?: (event: CustomEvent<any>) => void;
        "onGlueOpened"?: (event: CustomEvent<any>) => void;
        "overlay"?: boolean;
        "overlayClass"?: any;
        "overlayStyle"?: object;
        "position"?: string;
        "round"?: boolean;
        "safeAreaInsetBottom"?: boolean;
        "show"?: boolean;
        "teleport"?: string | HTMLElement;
        "transitionAppear"?: boolean;
        "width"?: string;
        "zIndex"?: string;
    }
    interface GlueProgress {
        "color"?: string;
        "inactive"?: string;
        "percentage"?: string;
        "pivotColor"?: string;
        "pivotText"?: string;
        "showPivot"?: boolean;
        "strokeWidth"?: string;
        "textColor"?: string;
        "trackColor"?: string;
    }
    interface GluePullRefresh {
        "animationDuration"?: number;
        "disabled"?: boolean;
        "headHeight"?: number;
        "loadingText"?: string;
        "loosingText"?: string;
        "modelValue"?: boolean;
        "onRefresh"?: (event: CustomEvent<any>) => void;
        "pullingText"?: string;
        "successDuration"?: number;
        "successText"?: string;
    }
    interface GlueRadio {
        "checkedColor"?: string;
        "disabled"?: boolean;
        "iconSize"?: string | number;
        "labelDisabled"?: boolean;
        "labelPosition"?: string;
        "modelValue"?: null;
        "name"?: null;
        "shape"?: string;
    }
    interface GlueRadioGroup {
        "checkedColor"?: string;
        "direction"?: string;
        "disabled"?: boolean;
        "iconSize"?: string | number;
        "modelValue"?: any;
    }
    interface GlueRate {
        "allowHalf"?: boolean;
        "color"?: string;
        "count"?: number;
        "disabled"?: boolean;
        "disabledColor"?: string;
        "first"?: string;
        "gutter"?: string;
        "icon"?: string;
        "iconPrefix"?: string;
        "modelValue"?: number;
        "onSelect"?: (event: CustomEvent<any>) => void;
        "readonly"?: boolean;
        "size"?: number;
        "touchable"?: string;
        "voidColor"?: string;
        "voidIcon"?: string;
    }
    interface GlueRow {
        "align"?: RowAlign;
        "gutter"?: string | number;
        "justify"?: RowJustify;
    }
    interface GlueSearch {
        "actionText"?: string;
        "background"?: string;
        "clearTrigger"?: string;
        "clearable"?: boolean;
        "label"?: string;
        "leftIcon"?: string;
        "modelValue"?: string;
        "onCancel"?: (event: CustomEvent<any>) => void;
        "onChangeValue"?: (event: CustomEvent<any>) => void;
        "onSearch"?: (event: CustomEvent<any>) => void;
        "rightIcon"?: string;
        "shape"?: 'square';
        "showAction"?: boolean;
    }
    interface GlueShareSheet {
        "cancelText"?: string;
        "closeIcon"?: string;
        "closeIconPosition"?: string;
        "closeOnClickOverlay"?: boolean;
        "closeOnPopstate"?: boolean;
        "closeable"?: boolean;
        "description"?: string;
        "duration"?: string;
        "height"?: string;
        "lazyRender"?: boolean;
        "lockScroll"?: boolean;
        "onCancel"?: (event: CustomEvent<any>) => void;
        "onSelect"?: (event: CustomEvent<any>) => void;
        "onShowChange"?: (event: CustomEvent<any>) => void;
        "options"?: any[];
        "overlay"?: boolean;
        "overlayClass"?: any;
        "overlayStyle"?: object;
        "position"?: string;
        "round"?: boolean;
        "safeAreaInsetBottom"?: boolean;
        "show"?: boolean;
        "teleport"?: string | object;
        "title"?: string;
        "transition"?: string;
        "transitionAppear"?: boolean;
        "width"?: string;
        "zIndex"?: string;
    }
    interface GlueSidebar {
        "modelValue"?: number;
    }
    interface GlueSidebarItem {
        "badge"?: string;
        "disabled"?: boolean;
        "dot"?: boolean;
        "onClick"?: (event: CustomEvent<any>) => void;
        "title"?: string;
    }
    interface GlueSkeleton {
        "animateState"?: boolean;
        "avatar"?: string;
        "avatarShape"?: string;
        "avatarSize"?: string;
        "loading"?: boolean;
        "round"?: boolean;
        "row"?: string | number;
        "rowWidth"?: string;
        "titleState"?: boolean;
        "titleWidth"?: string;
    }
    interface GlueSlider {
        "first"?: string;
    }
    interface GlueStep {
        "first"?: number;
        "last"?: string;
        "middle"?: string;
        "onClickStep"?: (event: CustomEvent<any>) => void;
    }
    interface GlueStepper {
        "allowEmpty"?: boolean;
        "beforeChange"?: any;
        "buttonSize"?: string | number;
        "decimalLength"?: string | number;
        "defaultValue"?: number;
        "disableInput"?: boolean;
        "disableMinus"?: boolean;
        "disablePlus"?: boolean;
        "disabled"?: boolean;
        "inputWidth"?: string | number;
        "integer"?: boolean;
        "longPress"?: boolean;
        "max"?: number;
        "min"?: number;
        "modelValue"?: string | number;
        "name"?: string;
        "onBlur"?: (event: CustomEvent<any>) => void;
        "onChangeValue"?: (event: CustomEvent<any>) => void;
        "onFocus"?: (event: CustomEvent<any>) => void;
        "onOverlimit"?: (event: CustomEvent<any>) => void;
        "placeholder"?: string;
        "showInput"?: boolean;
        "showMinus"?: boolean;
        "showPlus"?: boolean;
        "step"?: number;
        "theme"?: string;
    }
    interface GlueSteps {
        "active"?: string | number;
        "activeColor"?: string;
        "activeIcon"?: string;
        "direction"?: string;
        "finishIcon"?: string;
        "inactiveColor"?: string;
        "inactiveIcon"?: string;
        "onClickStep"?: (event: CustomEvent<any>) => void;
    }
    interface GlueSticky {
        "container"?: any;
        "fixed"?: boolean;
        "height"?: number;
        "offsetBottomValue"?: number;
        "offsetTopValue"?: number;
        "position"?: string;
        "transform"?: number;
        "width"?: number;
        "zIndex"?: string;
    }
    interface GlueSubmitBar {
        "first"?: string;
    }
    interface GlueSwipe {
        "first"?: string;
    }
    interface GlueSwipeCell {
        "beforeClose"?: any;
        "disabled"?: boolean;
        "leftWidth"?: any;
        "name"?: string;
        "onClick"?: (event: CustomEvent<any>) => void;
        "onCloseChange"?: (event: CustomEvent<any>) => void;
        "onOpenChange"?: (event: CustomEvent<any>) => void;
        "rightWidth"?: string | number;
        "stopPropagation"?: boolean;
    }
    interface GlueSwipeItem {
        "first"?: string;
    }
    interface GlueSwitch {
        "activeColor"?: string;
        "activeValue"?: boolean;
        "disabled"?: boolean;
        "inactiveColor"?: string;
        "inactiveValue"?: boolean;
        "loading"?: boolean;
        "modelValue"?: boolean;
        "onChange"?: (event: CustomEvent<any>) => void;
        "onChangeValue"?: (event: CustomEvent<any>) => void;
        "size"?: string | number;
    }
    interface GlueTab {
        "first"?: string;
    }
    interface GlueTabbar {
        "first"?: string;
    }
    interface GlueTabbarItem {
        "first"?: string;
    }
    interface GlueTabs {
        "active"?: number;
        "animated"?: boolean;
        "background"?: string;
        "beforeChange"?: any;
        "border"?: boolean;
        "color"?: string;
        "duration"?: number;
        "ellipsis"?: boolean;
        "first"?: string;
        "lazyRender"?: boolean;
        "lineHeight"?: string | number;
        "lineWidth"?: string | number;
        "offsetTopValue"?: number;
        "scrollspy"?: boolean;
        "sticky"?: boolean;
        "swipeThreshold"?: number;
        "swipeable"?: boolean;
        "titleActiveColor"?: string;
        "titleInactiveColor"?: string;
        "type"?: string;
    }
    interface GlueTag {
        "closeable"?: boolean;
        "color"?: string;
        "first"?: string;
        "mark"?: boolean;
        "onOnClick"?: (event: CustomEvent<any>) => void;
        "plain"?: boolean;
        "round"?: boolean;
        "show"?: boolean;
        "size"?: string;
        "textColor"?: string;
        "type"?: string;
    }
    interface GlueToast {
        "closeOnClick"?: boolean;
        "closeOnClickOverlay"?: boolean;
        "duration"?: number;
        "easing"?: string;
        "forbidClick"?: boolean;
        "icon"?: string;
        "iconPrefix"?: string;
        "loadingType"?: ToastType;
        "lockScroll"?: boolean;
        "message"?: string;
        "onGlueClick"?: (event: CustomEvent<any>) => void;
        "onGlueClose"?: (event: CustomEvent<any>) => void;
        "onGlueClosed"?: (event: CustomEvent<any>) => void;
        "onGlueOpen"?: (event: CustomEvent<any>) => void;
        "onGlueOpened"?: (event: CustomEvent<any>) => void;
        "onToggle"?: (event: CustomEvent<any>) => void;
        "overlayClass"?: null;
        "overlayStyle"?: object;
        "position"?: string;
        "show"?: boolean;
        "type"?: string;
    }
    interface GlueTreeSelect {
        "first"?: string;
    }
    interface GlueUploader {
        "accept"?: string;
        "afterRead"?: any;
        "beforeDelete"?: any;
        "beforeRead"?: any;
        "capture"?: string;
        "deletable"?: boolean;
        "disabled"?: boolean;
        "imageFit"?: string;
        "lazyLoad"?: boolean;
        "maxCount"?: number;
        "maxSize"?: number;
        "modelValue"?: [];
        "multiple"?: boolean;
        "name"?: string;
        "previewFullImage"?: boolean;
        "previewImage"?: boolean;
        "previewOptions"?: object;
        "previewSize"?: string | number;
        "resultType"?: ResultType;
        "showUpload"?: boolean;
        "uploadIcon"?: string;
        "uploadText"?: string;
    }
    interface GlueUploaderPreviewItem {
        "beforeDelete"?: any;
        "deletable"?: boolean;
        "imageFit"?: ImageFit;
        "index"?: number;
        "item"?: any;
        "lazyLoad"?: boolean;
        "name"?: string;
        "previewSize"?: string | number;
    }
    interface IntrinsicElements {
        "glue-action-bar": GlueActionBar;
        "glue-action-bar-button": GlueActionBarButton;
        "glue-action-bar-icon": GlueActionBarIcon;
        "glue-action-sheet": GlueActionSheet;
        "glue-address-edit": GlueAddressEdit;
        "glue-address-edit-detail": GlueAddressEditDetail;
        "glue-address-list": GlueAddressList;
        "glue-address-list-item": GlueAddressListItem;
        "glue-area": GlueArea;
        "glue-badge": GlueBadge;
        "glue-button": GlueButton;
        "glue-calendar": GlueCalendar;
        "glue-card": GlueCard;
        "glue-cascader": GlueCascader;
        "glue-cell": GlueCell;
        "glue-cell-group": GlueCellGroup;
        "glue-checkbox": GlueCheckbox;
        "glue-checkbox-group": GlueCheckboxGroup;
        "glue-circle": GlueCircle;
        "glue-col": GlueCol;
        "glue-collapse": GlueCollapse;
        "glue-collapse-item": GlueCollapseItem;
        "glue-component": GlueComponent;
        "glue-composables": GlueComposables;
        "glue-contact-card": GlueContactCard;
        "glue-contact-edit": GlueContactEdit;
        "glue-contact-list": GlueContactList;
        "glue-count-down": GlueCountDown;
        "glue-coupon": GlueCoupon;
        "glue-coupon-cell": GlueCouponCell;
        "glue-coupon-list": GlueCouponList;
        "glue-datetime-picker": GlueDatetimePicker;
        "glue-demo": GlueDemo;
        "glue-dialog": GlueDialog;
        "glue-divider": GlueDivider;
        "glue-dropdown-item": GlueDropdownItem;
        "glue-dropdown-menu": GlueDropdownMenu;
        "glue-empty": GlueEmpty;
        "glue-field": GlueField;
        "glue-form": GlueForm;
        "glue-grid": GlueGrid;
        "glue-grid-item": GlueGridItem;
        "glue-icon": GlueIcon;
        "glue-image": GlueImage;
        "glue-image-preview": GlueImagePreview;
        "glue-image-preview-item": GlueImagePreviewItem;
        "glue-index-anchor": GlueIndexAnchor;
        "glue-index-bar": GlueIndexBar;
        "glue-key": GlueKey;
        "glue-lazyload": GlueLazyload;
        "glue-list": GlueList;
        "glue-loading": GlueLoading;
        "glue-nav-bar": GlueNavBar;
        "glue-notice-bar": GlueNoticeBar;
        "glue-number-keyboard": GlueNumberKeyboard;
        "glue-overlay": GlueOverlay;
        "glue-pagination": GluePagination;
        "glue-password-input": GluePasswordInput;
        "glue-picker": GluePicker;
        "glue-popover": GluePopover;
        "glue-popup": GluePopup;
        "glue-progress": GlueProgress;
        "glue-pull-refresh": GluePullRefresh;
        "glue-radio": GlueRadio;
        "glue-radio-group": GlueRadioGroup;
        "glue-rate": GlueRate;
        "glue-row": GlueRow;
        "glue-search": GlueSearch;
        "glue-share-sheet": GlueShareSheet;
        "glue-sidebar": GlueSidebar;
        "glue-sidebar-item": GlueSidebarItem;
        "glue-skeleton": GlueSkeleton;
        "glue-slider": GlueSlider;
        "glue-step": GlueStep;
        "glue-stepper": GlueStepper;
        "glue-steps": GlueSteps;
        "glue-sticky": GlueSticky;
        "glue-submit-bar": GlueSubmitBar;
        "glue-swipe": GlueSwipe;
        "glue-swipe-cell": GlueSwipeCell;
        "glue-swipe-item": GlueSwipeItem;
        "glue-switch": GlueSwitch;
        "glue-tab": GlueTab;
        "glue-tabbar": GlueTabbar;
        "glue-tabbar-item": GlueTabbarItem;
        "glue-tabs": GlueTabs;
        "glue-tag": GlueTag;
        "glue-toast": GlueToast;
        "glue-tree-select": GlueTreeSelect;
        "glue-uploader": GlueUploader;
        "glue-uploader-preview-item": GlueUploaderPreviewItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "glue-action-bar": LocalJSX.GlueActionBar & JSXBase.HTMLAttributes<HTMLGlueActionBarElement>;
            "glue-action-bar-button": LocalJSX.GlueActionBarButton & JSXBase.HTMLAttributes<HTMLGlueActionBarButtonElement>;
            "glue-action-bar-icon": LocalJSX.GlueActionBarIcon & JSXBase.HTMLAttributes<HTMLGlueActionBarIconElement>;
            "glue-action-sheet": LocalJSX.GlueActionSheet & JSXBase.HTMLAttributes<HTMLGlueActionSheetElement>;
            "glue-address-edit": LocalJSX.GlueAddressEdit & JSXBase.HTMLAttributes<HTMLGlueAddressEditElement>;
            "glue-address-edit-detail": LocalJSX.GlueAddressEditDetail & JSXBase.HTMLAttributes<HTMLGlueAddressEditDetailElement>;
            "glue-address-list": LocalJSX.GlueAddressList & JSXBase.HTMLAttributes<HTMLGlueAddressListElement>;
            "glue-address-list-item": LocalJSX.GlueAddressListItem & JSXBase.HTMLAttributes<HTMLGlueAddressListItemElement>;
            "glue-area": LocalJSX.GlueArea & JSXBase.HTMLAttributes<HTMLGlueAreaElement>;
            "glue-badge": LocalJSX.GlueBadge & JSXBase.HTMLAttributes<HTMLGlueBadgeElement>;
            "glue-button": LocalJSX.GlueButton & JSXBase.HTMLAttributes<HTMLGlueButtonElement>;
            "glue-calendar": LocalJSX.GlueCalendar & JSXBase.HTMLAttributes<HTMLGlueCalendarElement>;
            "glue-card": LocalJSX.GlueCard & JSXBase.HTMLAttributes<HTMLGlueCardElement>;
            "glue-cascader": LocalJSX.GlueCascader & JSXBase.HTMLAttributes<HTMLGlueCascaderElement>;
            "glue-cell": LocalJSX.GlueCell & JSXBase.HTMLAttributes<HTMLGlueCellElement>;
            "glue-cell-group": LocalJSX.GlueCellGroup & JSXBase.HTMLAttributes<HTMLGlueCellGroupElement>;
            "glue-checkbox": LocalJSX.GlueCheckbox & JSXBase.HTMLAttributes<HTMLGlueCheckboxElement>;
            "glue-checkbox-group": LocalJSX.GlueCheckboxGroup & JSXBase.HTMLAttributes<HTMLGlueCheckboxGroupElement>;
            "glue-circle": LocalJSX.GlueCircle & JSXBase.HTMLAttributes<HTMLGlueCircleElement>;
            "glue-col": LocalJSX.GlueCol & JSXBase.HTMLAttributes<HTMLGlueColElement>;
            "glue-collapse": LocalJSX.GlueCollapse & JSXBase.HTMLAttributes<HTMLGlueCollapseElement>;
            "glue-collapse-item": LocalJSX.GlueCollapseItem & JSXBase.HTMLAttributes<HTMLGlueCollapseItemElement>;
            "glue-component": LocalJSX.GlueComponent & JSXBase.HTMLAttributes<HTMLGlueComponentElement>;
            "glue-composables": LocalJSX.GlueComposables & JSXBase.HTMLAttributes<HTMLGlueComposablesElement>;
            "glue-contact-card": LocalJSX.GlueContactCard & JSXBase.HTMLAttributes<HTMLGlueContactCardElement>;
            "glue-contact-edit": LocalJSX.GlueContactEdit & JSXBase.HTMLAttributes<HTMLGlueContactEditElement>;
            "glue-contact-list": LocalJSX.GlueContactList & JSXBase.HTMLAttributes<HTMLGlueContactListElement>;
            "glue-count-down": LocalJSX.GlueCountDown & JSXBase.HTMLAttributes<HTMLGlueCountDownElement>;
            "glue-coupon": LocalJSX.GlueCoupon & JSXBase.HTMLAttributes<HTMLGlueCouponElement>;
            "glue-coupon-cell": LocalJSX.GlueCouponCell & JSXBase.HTMLAttributes<HTMLGlueCouponCellElement>;
            "glue-coupon-list": LocalJSX.GlueCouponList & JSXBase.HTMLAttributes<HTMLGlueCouponListElement>;
            "glue-datetime-picker": LocalJSX.GlueDatetimePicker & JSXBase.HTMLAttributes<HTMLGlueDatetimePickerElement>;
            "glue-demo": LocalJSX.GlueDemo & JSXBase.HTMLAttributes<HTMLGlueDemoElement>;
            "glue-dialog": LocalJSX.GlueDialog & JSXBase.HTMLAttributes<HTMLGlueDialogElement>;
            "glue-divider": LocalJSX.GlueDivider & JSXBase.HTMLAttributes<HTMLGlueDividerElement>;
            "glue-dropdown-item": LocalJSX.GlueDropdownItem & JSXBase.HTMLAttributes<HTMLGlueDropdownItemElement>;
            "glue-dropdown-menu": LocalJSX.GlueDropdownMenu & JSXBase.HTMLAttributes<HTMLGlueDropdownMenuElement>;
            "glue-empty": LocalJSX.GlueEmpty & JSXBase.HTMLAttributes<HTMLGlueEmptyElement>;
            "glue-field": LocalJSX.GlueField & JSXBase.HTMLAttributes<HTMLGlueFieldElement>;
            "glue-form": LocalJSX.GlueForm & JSXBase.HTMLAttributes<HTMLGlueFormElement>;
            "glue-grid": LocalJSX.GlueGrid & JSXBase.HTMLAttributes<HTMLGlueGridElement>;
            "glue-grid-item": LocalJSX.GlueGridItem & JSXBase.HTMLAttributes<HTMLGlueGridItemElement>;
            "glue-icon": LocalJSX.GlueIcon & JSXBase.HTMLAttributes<HTMLGlueIconElement>;
            "glue-image": LocalJSX.GlueImage & JSXBase.HTMLAttributes<HTMLGlueImageElement>;
            "glue-image-preview": LocalJSX.GlueImagePreview & JSXBase.HTMLAttributes<HTMLGlueImagePreviewElement>;
            "glue-image-preview-item": LocalJSX.GlueImagePreviewItem & JSXBase.HTMLAttributes<HTMLGlueImagePreviewItemElement>;
            "glue-index-anchor": LocalJSX.GlueIndexAnchor & JSXBase.HTMLAttributes<HTMLGlueIndexAnchorElement>;
            "glue-index-bar": LocalJSX.GlueIndexBar & JSXBase.HTMLAttributes<HTMLGlueIndexBarElement>;
            "glue-key": LocalJSX.GlueKey & JSXBase.HTMLAttributes<HTMLGlueKeyElement>;
            "glue-lazyload": LocalJSX.GlueLazyload & JSXBase.HTMLAttributes<HTMLGlueLazyloadElement>;
            "glue-list": LocalJSX.GlueList & JSXBase.HTMLAttributes<HTMLGlueListElement>;
            "glue-loading": LocalJSX.GlueLoading & JSXBase.HTMLAttributes<HTMLGlueLoadingElement>;
            "glue-nav-bar": LocalJSX.GlueNavBar & JSXBase.HTMLAttributes<HTMLGlueNavBarElement>;
            "glue-notice-bar": LocalJSX.GlueNoticeBar & JSXBase.HTMLAttributes<HTMLGlueNoticeBarElement>;
            "glue-number-keyboard": LocalJSX.GlueNumberKeyboard & JSXBase.HTMLAttributes<HTMLGlueNumberKeyboardElement>;
            "glue-overlay": LocalJSX.GlueOverlay & JSXBase.HTMLAttributes<HTMLGlueOverlayElement>;
            "glue-pagination": LocalJSX.GluePagination & JSXBase.HTMLAttributes<HTMLGluePaginationElement>;
            "glue-password-input": LocalJSX.GluePasswordInput & JSXBase.HTMLAttributes<HTMLGluePasswordInputElement>;
            "glue-picker": LocalJSX.GluePicker & JSXBase.HTMLAttributes<HTMLGluePickerElement>;
            "glue-popover": LocalJSX.GluePopover & JSXBase.HTMLAttributes<HTMLGluePopoverElement>;
            "glue-popup": LocalJSX.GluePopup & JSXBase.HTMLAttributes<HTMLGluePopupElement>;
            "glue-progress": LocalJSX.GlueProgress & JSXBase.HTMLAttributes<HTMLGlueProgressElement>;
            "glue-pull-refresh": LocalJSX.GluePullRefresh & JSXBase.HTMLAttributes<HTMLGluePullRefreshElement>;
            "glue-radio": LocalJSX.GlueRadio & JSXBase.HTMLAttributes<HTMLGlueRadioElement>;
            "glue-radio-group": LocalJSX.GlueRadioGroup & JSXBase.HTMLAttributes<HTMLGlueRadioGroupElement>;
            "glue-rate": LocalJSX.GlueRate & JSXBase.HTMLAttributes<HTMLGlueRateElement>;
            "glue-row": LocalJSX.GlueRow & JSXBase.HTMLAttributes<HTMLGlueRowElement>;
            "glue-search": LocalJSX.GlueSearch & JSXBase.HTMLAttributes<HTMLGlueSearchElement>;
            "glue-share-sheet": LocalJSX.GlueShareSheet & JSXBase.HTMLAttributes<HTMLGlueShareSheetElement>;
            "glue-sidebar": LocalJSX.GlueSidebar & JSXBase.HTMLAttributes<HTMLGlueSidebarElement>;
            "glue-sidebar-item": LocalJSX.GlueSidebarItem & JSXBase.HTMLAttributes<HTMLGlueSidebarItemElement>;
            "glue-skeleton": LocalJSX.GlueSkeleton & JSXBase.HTMLAttributes<HTMLGlueSkeletonElement>;
            "glue-slider": LocalJSX.GlueSlider & JSXBase.HTMLAttributes<HTMLGlueSliderElement>;
            "glue-step": LocalJSX.GlueStep & JSXBase.HTMLAttributes<HTMLGlueStepElement>;
            "glue-stepper": LocalJSX.GlueStepper & JSXBase.HTMLAttributes<HTMLGlueStepperElement>;
            "glue-steps": LocalJSX.GlueSteps & JSXBase.HTMLAttributes<HTMLGlueStepsElement>;
            "glue-sticky": LocalJSX.GlueSticky & JSXBase.HTMLAttributes<HTMLGlueStickyElement>;
            "glue-submit-bar": LocalJSX.GlueSubmitBar & JSXBase.HTMLAttributes<HTMLGlueSubmitBarElement>;
            "glue-swipe": LocalJSX.GlueSwipe & JSXBase.HTMLAttributes<HTMLGlueSwipeElement>;
            "glue-swipe-cell": LocalJSX.GlueSwipeCell & JSXBase.HTMLAttributes<HTMLGlueSwipeCellElement>;
            "glue-swipe-item": LocalJSX.GlueSwipeItem & JSXBase.HTMLAttributes<HTMLGlueSwipeItemElement>;
            "glue-switch": LocalJSX.GlueSwitch & JSXBase.HTMLAttributes<HTMLGlueSwitchElement>;
            "glue-tab": LocalJSX.GlueTab & JSXBase.HTMLAttributes<HTMLGlueTabElement>;
            "glue-tabbar": LocalJSX.GlueTabbar & JSXBase.HTMLAttributes<HTMLGlueTabbarElement>;
            "glue-tabbar-item": LocalJSX.GlueTabbarItem & JSXBase.HTMLAttributes<HTMLGlueTabbarItemElement>;
            "glue-tabs": LocalJSX.GlueTabs & JSXBase.HTMLAttributes<HTMLGlueTabsElement>;
            "glue-tag": LocalJSX.GlueTag & JSXBase.HTMLAttributes<HTMLGlueTagElement>;
            "glue-toast": LocalJSX.GlueToast & JSXBase.HTMLAttributes<HTMLGlueToastElement>;
            "glue-tree-select": LocalJSX.GlueTreeSelect & JSXBase.HTMLAttributes<HTMLGlueTreeSelectElement>;
            "glue-uploader": LocalJSX.GlueUploader & JSXBase.HTMLAttributes<HTMLGlueUploaderElement>;
            "glue-uploader-preview-item": LocalJSX.GlueUploaderPreviewItem & JSXBase.HTMLAttributes<HTMLGlueUploaderPreviewItemElement>;
        }
    }
}
